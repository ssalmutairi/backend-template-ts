import fp from "fastify-plugin";
import { FastifyRequest } from "fastify";
import { messageResponseSchemaType } from "../shared/common.schema";
import {
  templateCreateBodySchemaType,
  templateFilterSchemaType,
  templateListResponseSchemaType,
  templateResponseSchemaType,
  templateUpdateBodySchemaType
} from "./template.schema";

type templateFindAllType = {
  request?: FastifyRequest;
  skip: number;
  take: number;
  filter: templateFilterSchemaType;
};
type templateCreateType = {
  request?: FastifyRequest;
  data: templateCreateBodySchemaType;
};

type templateFindOneType = {
  request?: FastifyRequest;
  id: number;
};

type templateUpdateType = {
  request?: FastifyRequest;
  data: templateUpdateBodySchemaType;
  id: number;
};

type templateDeleteType = {
  request?: FastifyRequest;
  id: number;
};

interface TemplateService {
  findAll(data: templateFindAllType): Promise<templateListResponseSchemaType>;
  create: (data: templateCreateType) => Promise<templateResponseSchemaType>;
  findOne: (data: templateFindOneType) => Promise<templateResponseSchemaType | null>;
  update: (data: templateUpdateType) => Promise<templateResponseSchemaType>;
  remove: (data: templateDeleteType) => Promise<messageResponseSchemaType>;
  count: (data: Partial<templateFindAllType>) => Promise<number>;
}

export default fp(async (fastify) => {
  const {
    prisma,
    // httpErrors
  } = fastify;

  const templateService: TemplateService = {
    findAll: async ({ skip, take, filter, request }) => {
      //TODO: implement your logic here
      return [];
    },
    create: async ({ data }) => {
      //TODO: implement your logic here
      return { id: 1, createdAt: new Date(), updatedAt: new Date() };
    },
    findOne: async ({ id, request }) => {
      //TODO: implement your logic here
      return { id: 1, createdAt: new Date(), updatedAt: new Date() };
    },
    update: async ({ id, data }) => {
      //TODO: implement your logic here
      return { id: 1, createdAt: new Date(), updatedAt: new Date() };
    },
    remove: async ({ id }) => {
      //TODO: implement your logic here
      return { message: fastify.t("templates.messages.deleted") };
    },
    count: async ({ filter }) => {
      return await prisma.$transaction(async (prisma) => {
        //TODO: implement your logic here
        return 0;
      });
    },
  };

  fastify.decorate("templateService", templateService);
});

declare module "fastify" {
  interface FastifyInstance {
    templateService: TemplateService;
  }
}
